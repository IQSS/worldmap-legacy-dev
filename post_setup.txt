# ssh into your vagrant environment via: "vagrant ssh"
cd /vagrant/cga-worldmap


# ------------------------------------------------
# Update pg_hba.conf conf file
#
# Replace the 2nd and 3rd occurrences of "peer" with "md5"
#
# Reference: http://stackoverflow.com/questions/18664074/getting-error-peer-authentication-failed-for-user-postgres-when-trying-to-ge
# ------------------------------------------------
echo "-- Postgres. Update conf file to fix peer authentication failure --"

# Replace 2nd occurrence
sudo sed -i ':a N;$!ba; s/peer/md5/2' /etc/postgresql/9.3/main/pg_hba.conf

# Replace 2nd occurrence again--originally the 3rd occurrence
sudo sed -i ':a N;$!ba; s/peer/md5/2' /etc/postgresql/9.3/main/pg_hba.conf

# Open db for password Reset
sudo sed -i '1s/^/local  all   all   trust\n/' /etc/postgresql/9.3/main/pg_hba.conf

# Restart postgres
echo "-- Restart postgres --"

sudo service postgresql restart

# ------------------------------------------------
# Update postgres password to '123'
# ------------------------------------------------
echo "-- Set postgres user password to '123' --"

# Set variable with the postgres password
# ! For local testing only !
#
POSTGRES_PW="123"
psql -U postgres -c "ALTER USER postgres with password '$POSTGRES_PW';"

# Remove 1st line that allows postgres password reset
sudo sed -i '1d' /etc/postgresql/9.3/main/pg_hba.conf

# Restart postgres (again)
echo "-- Restart postgres (again) --"

sudo service postgresql restart

# ------------------------------------------------
# Add postgres .pgpass file
# ------------------------------------------------
echo "-- Add postgres .pgpass file --"
echo -n "*:*:*:postgres:$POSTGRES_PW" > /home/vagrant/.pgpass
chmod 600 .pgpass
export PGPASSFILE=/home/vagrant/.pgpass
# ------------------------------------------------
# Postgres: Create/update databases
# ------------------------------------------------
echo "-- Postgres: update db, create db --"
#
PGPASSWORD=$POSTGRES_PW psql -U postgres -c "update pg_database set datistemplate=false where datname='template1';"
PGPASSWORD=$POSTGRES_PW psql -U postgres -c "drop database Template1;"
PGPASSWORD=$POSTGRES_PW psql -U postgres -c "create database template1 with owner=postgres encoding='UTF-8' lc_collate='en_US.utf8' lc_ctype='en_US.utf8' template template0;"
PGPASSWORD=$POSTGRES_PW psql -U postgres -c "update pg_database set datistemplate=true where datname='template1';"

# ------------------------------------------------
# Postgres: create wm_user
# ------------------------------------------------
echo "-- Postgres: create wm_user with superuser privileges --"
#
PGPASSWORD=$POSTGRES_PW psql -U postgres -c "CREATE USER wm_user WITH PASSWORD 'wm_password' SUPERUSER LOGIN;"


# ------------------------------------------------
# Create PostGIS template with legacy GIST operators
# ------------------------------------------------
echo "-- Postgres: create template_postgis --"

PGPASSWORD=$POSTGRES_PW createdb -U postgres -E UTF8 -O wm_user template_postgis

PGPASSWORD=$POSTGRES_PW psql -U postgres -d template_postgis -c "CREATE EXTENSION postgis;"

PGPASSWORD=$POSTGRES_PW psql -U postgres -d template_postgis -f /vagrant/cga-worldmap/geonode/static/geonode/patches/postgis/legacy_gist.sql


# ------------------------------------------------
# Create worldmap databases
# ------------------------------------------------
echo "-- Postgres: create worldmap databases --"

PGPASSWORD=$POSTGRES_PW createdb -U postgres -E UTF8 -T template_postgis wm_db
PGPASSWORD=$POSTGRES_PW createdb -U postgres -E UTF8 -T template_postgis wmdata

# ------------------------------------------------
# Create monthly dbs for next 15 months
#  The prod system makes monthly dbs to store new layers)
#  - For naming, use the format "wm_YYYYMM".
#    - Example names: "wm_201703", "wm_201704"
# ------------------------------------------------
echo "Create monthly dbs for next 15 months..."
d=$(date +'%Y-%m-%d')
for i in {1..15}; do
  #echo $d
  d=$(date -I -d "$d + 1 month")
  echo "Create database wm_${d:0:4}${d:5:2}"
  PGPASSWORD=$POSTGRES_PW createdb -E UTF8 -U postgres -T template_postgis wm_"${d:0:4}${d:5:2}"
done

# ------------------------------------------------
# Add Dataverse store
# If you're using WorldMap with Dataverse, where Dataverse (http://dataverse.org/)
# can create layers via API, then add a "dataverse" table.
# ------------------------------------------------
echo "Add dataverse db..."
PGPASSWORD=$POSTGRES_PW createdb -E UTF8 -U postgres -T template_postgis dataverse
