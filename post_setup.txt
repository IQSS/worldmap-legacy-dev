# ------------------------------------------------
# Update pg_hba.conf conf file
#
# Replace the 2nd and 3rd occurrences of "peer" with "md5"
#
# Reference: http://stackoverflow.com/questions/18664074/getting-error-peer-authentication-failed-for-user-postgres-when-trying-to-ge
# ------------------------------------------------
echo "-- Postgres. Update conf file to fix peer authentication failure --"

# Replace 2nd occurrence
sudo sed -i ':a N;$!ba; s/peer/md5/2' /etc/postgresql/9.3/main/pg_hba.conf

# Replace 2nd occurrence again--originally the 3rd occurrence
sudo sed -i ':a N;$!ba; s/peer/md5/2' /etc/postgresql/9.3/main/pg_hba.conf

# Open db for password Reset
sudo sed -i '1s/^/local  all   all   trust\n/' /etc/postgresql/9.3/main/pg_hba.conf

# Restart postgres
echo "-- Restart postgres --"

sudo service postgresql restart

# ------------------------------------------------
# Update postgres password to '123'
# ------------------------------------------------
echo "-- Set postgres user password to '123' --"

# Set variable with the postgres password
# ! For local testing only !
#
POSTGRES_PW="123"
psql -U postgres -c "ALTER USER postgres with password '$POSTGRES_PW';"

# Remove 1st line that allows postgres password reset
sudo sed -i '1d' /etc/postgresql/9.3/main/pg_hba.conf

# Restart postgres (again)
echo "-- Restart postgres (again) --"

sudo service postgresql restart

# ------------------------------------------------
# Add postgres .pgpass file
# ------------------------------------------------
echo "-- Add postgres .pgpass file --"
echo -n "*:*:*:postgres:$POSTGRES_PW" > /home/vagrant/.pgpass
chmod 600 .pgpass
export PGPASSFILE=/home/vagrant/.pgpass
# ------------------------------------------------
# Postgres: Create/update databases
# ------------------------------------------------
echo "-- Postgres: update db, create db --"
#
PGPASSWORD=$POSTGRES_PW psql -U postgres -c "update pg_database set datistemplate=false where datname='template1';"
PGPASSWORD=$POSTGRES_PW psql -U postgres -c "drop database Template1;"
PGPASSWORD=$POSTGRES_PW psql -U postgres -c "create database template1 with owner=postgres encoding='UTF-8' lc_collate='en_US.utf8' lc_ctype='en_US.utf8' template template0;"
PGPASSWORD=$POSTGRES_PW psql -U postgres -c "update pg_database set datistemplate=true where datname='template1';"

# ------------------------------------------------
# Postgres: create wm_user
# ------------------------------------------------
echo "-- Postgres: create wm_user with superuser privileges --"
#
PGPASSWORD=$POSTGRES_PW psql -U postgres -c "CREATE USER wm_user WITH PASSWORD 'wm_password' SUPERUSER LOGIN;"


# ------------------------------------------------
# Create PostGIS template with legacy GIST operators
# ------------------------------------------------
echo "-- Postgres: create template_postgis --"

PGPASSWORD=$POSTGRES_PW createdb -U postgres -E UTF8 -O wm_user template_postgis

PGPASSWORD=$POSTGRES_PW psql -U postgres -d template_postgis -c "CREATE EXTENSION postgis;"

PGPASSWORD=$POSTGRES_PW psql -U postgres -d template_postgis -f /vagrant/cga-worldmap/geonode/static/geonode/patches/postgis/legacy_gist.sql


# ------------------------------------------------
# Create worldmap databases
# ------------------------------------------------
echo "-- Postgres: create worldmap databases --"

PGPASSWORD=$POSTGRES_PW createdb -U postgres -E UTF8 -T template_postgis wm_db
PGPASSWORD=$POSTGRES_PW createdb -U postgres -E UTF8 -T template_postgis wmdata

# ------------------------------------------------
# Create monthly dbs for next 15 months
#  The prod system makes monthly dbs to store new layers)
#  - For naming, use the format "wm_YYYYMM".
#    - Example names: "wm_201703", "wm_201704"
# ------------------------------------------------
echo "Create monthly dbs for next 5 months..."
d=$(date +'%Y-%m-%d')
for i in {1..5}; do
  #echo $d
  echo "Create database wm_${d:0:4}${d:5:2}"
  PGPASSWORD=$POSTGRES_PW createdb -E UTF8 -U postgres -T template_postgis wm_"${d:0:4}${d:5:2}"
  d=$(date -I -d "$d + 1 month")
done

# ------------------------------------------------
# Add Dataverse store
# If you're using WorldMap with Dataverse, where Dataverse (http://dataverse.org/)
# can create layers via API, then add a "dataverse" table.
# ------------------------------------------------
echo "Add dataverse db..."
PGPASSWORD=$POSTGRES_PW createdb -E UTF8 -U postgres -T template_postgis dataverse

echo "MAY NEED THE REST TO BE MANUAL STEPS"

# ------------------------------------------------
# Geonode install steps
# ------------------------------------------------
echo "Geonode install steps..."

#git clone git://github.com/cga-harvard/cga-worldmap.git cga-worldmap
cd /vagrant/cga-worldmap/
#git submodule update --init
source ~/.bashrc
mkvirtualenv worldmap

# ------------------------------------------------
# Run pip install
# ------------------------------------------------
echo "-- run pip install --"
pip install -r shared/requirements.txt

# ------------------------------------------------
# Update pavement.py
# ------------------------------------------------

# Update for local build BUT don't check pavement.py changes into repoistory!!
#
sudo sed -i ':a N;$!ba; s/localhost:8080\/geoserver/localhost:8081\/geoserver/g' /vagrant/cga-worldmap/pavement.py


# ------------------------------------------------
# Update Jetty.xml
# ------------------------------------------------
echo "-- Update Jetty.xml host/port --"

# Set jetty.host to "0.0.0.0" from "192.168.33.16" (port is already 8080)
#
sudo sed -i ':a N;$!ba; s/name="jetty.host" default="192.168.33.16"/name="jetty.host" default="0.0.0.0"/g' /vagrant/cga-worldmap/src/geoserver-geonode-ext/jetty.xml

# Set jetty.port from 8080 to 8081
#
# <Set name="port"><SystemProperty name="jetty.port" default="8081"/></Set>
#
sudo sed -i ':a N;$!ba; s/name="jetty.port" default="8080"/name="jetty.port" default="8081"/g' /vagrant/cga-worldmap/src/geoserver-geonode-ext/jetty.xml

# ------------------------------------------------
# Create a local_settings.py to change port
# ------------------------------------------------
echo "-- Update Django urls for Geoserver --"

# remove file (if it exists)
# --------------------------
rm -f /vagrant/cga-worldmap/geonode/local_settings.py

# write new file
# --------------------------
cat <<FMARKER>> /vagrant/cga-worldmap/geonode/local_settings.py

# (Move geoserver to port 8081)

# The FULLY QUALIFIED url to the GeoServer instance for this GeoNode.
GEOSERVER_BASE_URL = "http://localhost:8081/geoserver/"

# The FULLY QUALIFIED url to the GeoNetwork instance for this GeoNode
GEONETWORK_BASE_URL = "http://localhost:8081/geonetwork/"

FMARKER




# ------------------------------------------------
# Continue on with paver steps
# ------------------------------------------------
cd /vagrant/cga-worldmap/
deactivate

# ------------------------------------------------
# Just in case django fixing steps
# ------------------------------------------------
cd /home/vagrant/.virtualenvs/worldmap/lib/python2.7/site-packages
rm -rf django
rm -rf Django-1.4.13.dist-info

# activate the virtualenv directly
cd /vagrant/cga-worldmap/
source /home/vagrant/.virtualenvs/worldmap/bin/activate

# Reinstall django
pip install -v django==1.4.13


# ------------------------------------------------
# Run paver build
# ------------------------------------------------
echo "-- Run paver build --"
paver build


# ------------------------------------------------
# Create a django superuser
# ------------------------------------------------

# For this next command:
# Remember the credentials for the "Start Django" step later on
django-admin.py createsuperuser --settings=geonode.settings

### Start jetty and django separately
# ------------------------------------------------

# ------------------------------------------------
# Start jetty
# ------------------------------------------------
# Open a new terminal, ssh into vagrant and run these lines:
cd /vagrant/cga-worldmap
workon worldmap
paver start_geoserver

# Open a web browser on your local machine (not the VM)
# Go to: http://localhost:8080
# credentials: admin/admin


# ------------------------------------------------
# Start Django in another window
# ------------------------------------------------
# Open a new terminal, ssh into vagrant and run these lines:
cd /vagrant/cga-worldmap
workon worldmap
python manage.py runserver 0.0.0.0:8000

# Open a web browser on your local machine (not the VM)
# Go to: http://localhost:8000
# Use the credentials from the 'createsuperuser' step above


#------------------------------------------------
## Add geoserver stores
#------------------------------------------------
#  - Log into http://0.0.0.0:8080/geoserver/web/
#    - creds: admin/geoserver
#  - From the left column, click "Stores"
#  - Click "Add New Store"
#  - For "New Data Source", choose "PostGIS - PostGIS Database"
#  - Add each of your databases from the steps above titled:
#    - "Add monthly stores"
#      - e.g. "wm_201703", "wm_201704"
#    - "Add Dataverse store"
#      - e.g. "dataverse"
#  - The username/password for these steps is:
#      - wm_user/wm_password
